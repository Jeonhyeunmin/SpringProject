<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaGroupS6.dao.ShopDAO">
	
	<select id="getShopList" resultType="com.spring.javaGroupS6.vo.ShopVO">
		select s.*, avg(sr.star) as star, count(sr.idx) as reviewCnt 
		from shop s left join shopReview sr on s.idx = sr.shopIdx
		where s.category = #{category}
		and s.claim = 'NO'
		<if test='mainCategory != ""'>and s.mainCategory = #{mainCategory}</if>
		<if test='subCategory != ""'>and s.subCategory = #{subCategory}</if>
		<if test='accept == "YES"'>and s.accept = 'YES' </if> 
		<if test='accept == "NO"'>and s.accept = 'NO' </if>
		<if test='company != "all" and company != ""'>and s.company = #{company}</if> 
		group by s.idx
		order by s.category, s.mainCategory, s.subCategory;
	</select>

	<select id="getSubCateCnt" resultType="int">
		select COUNT(*) as count from shop where category = #{category} and mainCategory = #{mainCategory} and accept = 'YES' and claim = 'NO'  group by subCategory order by category, mainCategory, subCategory;
	</select>

	<select id="getBrandCateCnt" resultType="int">
		select COUNT(*) as count from shop where category = #{category} and mainCategory = #{mainCategory} and subCategory = #{subCategory} and accept = 'YES' and claim = 'NO'  group by company order by company;
	</select>

	<select id="getShopContent" resultType="com.spring.javaGroupS6.vo.ShopVO">
		select * from shop where idx = #{idx};
	</select>

	<select id="getPartnerShopList" resultType="com.spring.javaGroupS6.vo.ShopVO">
		select * from shop where mid = #{mid};
	</select>

	<select id="getList" resultType="com.spring.javaGroupS6.vo.CategoryVO">
		select * from category order by category;
	</select>

	<select id="getPostCount" resultType="int">
		select count(*) from shop where mid = #{mid};
	</select>

	<select id="getMainCategoryList" resultType="com.spring.javaGroupS6.vo.MainCategoryVO">
		select * from mainCategory where category = #{category} order by category;
	</select>

	<select id="getSubCategoryList" resultType="com.spring.javaGroupS6.vo.SubCategoryVO">
		select * from subCategory where category = #{category} and mainCategory = #{mainCategory} order by mainCategory;
	</select>

	<select id="getReviewAverage" resultType="Double">
		select ifnull(avg(star), 0.0) from shopReview where shopIdx = #{idx};
	</select>

	<select id="getReview" resultType="com.spring.javaGroupS6.vo.ShopReviewVO">
		select sr.*, c.name as customerName from shopReview sr, customer c where sr.shopIdx = #{idx} 
		<if test='user == "user"'>and sr.claim = "NO"</if>
		 and sr.mid = c.mid order by sr.reviewDate;
	</select>
	
	<select id="getReviewLikeInfo" resultType="com.spring.javaGroupS6.vo.ReviewLikesVO">
		select * from reviewLikes where reviewIdx = #{idx} and customer = #{mid} limit 1;
	</select>

	<select id="getMyLikes" resultType="int">
		select reviewIdx from reviewLikes where shopIdx = #{idx} and customer = #{mid};
	</select>

	<select id="getMyReview" resultType="com.spring.javaGroupS6.vo.ShopReviewVO">
		select * from shopReview where idx = #{idx};
	</select>
	
	<select id="getMyCartSearch" resultType="com.spring.javaGroupS6.vo.ShopCartVO">
		select * from shopCart where shopIdx = #{shopIdx} and mid = #{mid} and optionSelect = #{optionSelect};
	</select>
	
	<select id="getMyCart" resultType="com.spring.javaGroupS6.vo.ShopCartVO">
		select sc.*, s.company from shopCart sc left join shop s on sc.shopidx = s.idx where sc.mid = #{mid} order by idx;
	</select>
	
	<select id="getIdxCart" resultType="com.spring.javaGroupS6.vo.ShopOrderVO">
		select sc.*, s.discount, s.price, s.company, s.mid as partnerMid from shopCart sc, shop s where sc.idx = #{idx} and s.idx = sc.shopIdx;
	</select>
	
	<select id="getOneOrder" resultType="com.spring.javaGroupS6.vo.ShopOrderVO">
		select *, title as shopTitle, mid as partnerMid from shop where idx = #{idx};
	</select>
	
	<select id="getCouponInfo" resultType="com.spring.javaGroupS6.vo.CouponVO">
		select * from coupon where idx = #{idx};
	</select>
	
	<select id="getSearch" resultType="com.spring.javaGroupS6.vo.ShopVO">
		select s.*, avg(sr.star) as star, count(sr.idx) as reviewCnt 
			from shop s
			left join shopreview sr on s.idx = sr.shopIdx
			where 
			    (s.title like concat('%', #{query}, '%') 
			     or s.company like concat('%', #{query}, '%') 
			     or s.mid like concat('%', #{query}, '%') 
			     or s.subCategory like concat('%', #{query}, '%'))
			group by s.idx;
	</select>
	
	<select id="getBestShopTop3" resultType="com.spring.javaGroupS6.vo.ShopVO">
		SELECT 
    s.*,
    COUNT(o.shopIdx) AS purchase_count
		FROM 
		    shop AS s
		LEFT JOIN 
		    shopOrder AS o
		ON 
		    s.idx = o.shopIdx
		GROUP BY 
		    s.idx, s.title
		ORDER BY 
		    purchase_count DESC
		LIMIT 4;
	</select>
	
	<select id="getdateShopTop3" resultType="com.spring.javaGroupS6.vo.ShopVO">
		SELECT *
		FROM shop
		ORDER BY wDate DESC
		LIMIT 4;
	</select>
	
	<select id="getNewShop" resultType="com.spring.javaGroupS6.vo.ShopVO">
		SELECT *
		FROM shop
		WHERE wDate >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
		  AND wDate &lt;= NOW()
		  limit 100;
	</select>
	
	<select id="filterProducts" resultType="com.spring.javaGroupS6.vo.ShopVO">
    SELECT *
    FROM shop
    <where>
        <!-- 검색어 필터 -->
        <if test="search != null and search != ''">
            LOWER(title) LIKE CONCAT('%', #{search}, '%')
        </if>

        <!-- 카테고리 필터 -->
        <if test="category != null and category != ''">
            AND category = #{category}
        </if>

        <!-- 가격 필터 -->
        <if test="price != null and price != ''">
            AND (
                (#{price} = 'low' AND price &lt;= 50000) OR
                (#{price} = 'mid' AND price BETWEEN 50001 AND 100000) OR
                (#{price} = 'high' AND price > 100000)
            )
        </if>
    </where>
    ORDER BY idx DESC
	</select>

	
	<insert id="shopInput">
		insert into shop values (default, #{vo.mid}, #{vo.company}, #{vo.category}, #{vo.mainCategory}, #{vo.subCategory}, #{vo.title}, #{vo.discount}, #{vo.price}, #{vo.optionName}, #{vo.optionPrice}, #{vo.thumbnail}, #{vo.titleImg}, #{vo.content}, #{vo.fSize}, default, default, default);
	</insert>
	
	<insert id="setReviewInput">
		insert into shopReview values(default, #{idx}, #{mid}, #{vo.content}, #{vo.star}, default, default, default);
	</insert>
	
	<insert id="setReviewGoodInput">
		insert into reviewLikes values(default, #{idx}, #{reviewIdx}, #{mid});
	</insert>
	
	<insert id="setCartInput">
		insert into shopCart values(default, #{vo.mid}, #{vo.shopIdx}, #{vo.thumbnail}, #{vo.shopTitle}, #{vo.optionSelect}, #{vo.quantity}, #{vo.totalPrice}, default);
	</insert>
	
	<insert id="setShopOrder">
		insert into shopOrder values(default, #{vo.shopIdx}, #{vo.mid}, #{vo.partnerMid}, #{vo.company}, #{vo.shopTitle}, #{vo.price}, #{vo.quantity}, #{vo.discount}, #{vo.couponIdx}, #{vo.coupon}, #{vo.couponDiscount}, #{vo.pay}, #{vo.totalPrice}, #{vo.usePoint}, #{vo.addPoint}, #{vo.thumbnail}, #{vo.optionSelect}, default, default, default, default, default);
	</insert>
	
	<update id="setShopUpdate">
		<!-- update shop set company = #{vo.company}, category = #{vo.category}, mainCategory = #{vo.mainCategory}, subCategory = #{vo.subCategory}, title = #{vo.title}, discount = #{vo.discount}, price = #{vo.price}, optionName = #{vo.optionName}, optionPrice = #{vo.optionPrice}, thumbnail = #{vo.thumbnail}, titleImg = #{vo.titleImg}, content = #{vo.content}, fSize = #{vo.fSize}, wDate = now(), accept = 'NO' where idx = #{vo.idx}; -->
		update shop set company = #{vo.company}, category = #{vo.category}, mainCategory = #{vo.mainCategory}, subCategory = #{vo.subCategory}, title = #{vo.title}, discount = #{vo.discount}, price = #{vo.price}, optionName = #{vo.optionName}, optionPrice = #{vo.optionPrice}, thumbnail = #{vo.thumbnail}, titleImg = #{vo.titleImg}, content = #{vo.content}, fSize = #{vo.fSize}, wDate = now() where idx = #{vo.idx};
	</update>
	
	<update id="setPointUp">
		update customer set point = point + #{point} where mid = #{mid};
	</update>
	
	<update id="setReviewGoodCheck">
		update shopReview set good = good + 1 where idx = #{idx};
	</update>
	
	<update id="setReviewClaim">
		update shopReview set claim = 'YES' where idx = #{idx};
	</update>
	
	<update id="setReviewUpdate">
		update shopReview set content = #{vo.content}, star = #{vo.star}, reviewDate = now() where idx = #{vo.idx};
	</update>
	
	<update id="setCartQuantityUpdate">
		update shopCart set quantity = quantity + #{quantity}, totalPrice = #{totalPrice} where idx = #{idx};
	</update>
	
	<update id="setUseCoupon">
		update coupon set status = 'used', useDate = now() where idx = #{vo.couponIdx};
	</update>
	
	<update id="setReviewOk">
		update shopOrder set review = 'YES' where idx = #{idx};
	</update>
	
	<delete id="setShopDelete">
		delete from shop where idx = #{idx};
	</delete>
	
	<delete id="setReviewDelete">
		delete from shopReview where idx = #{idx};
	</delete>
	
	<delete id="setCartDelete">
		delete from shopCart where idx = #{idx};
	</delete>
	
	<delete id="setCartDeleteAll">
		delete from shopCart where idx = #{cartIdx};
	</delete>
	
</mapper>